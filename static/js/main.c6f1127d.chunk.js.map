{"version":3,"sources":["components/Users.js","components/UserTable.js","components/SearchBox.js","components/Search.js","utils/API.js","components/UserList.js","components/UserListPage.js","components/Wrapper.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["Users","_ref","users","react_default","a","createElement","undefined","name","map","_ref2","login","picture","email","location","phone","key","uuid","data-th","src","thumbnail","alt","className","title","first","last","city","state","UserTable","headings","handleSort","Table","striped","bordered","hover","width","style","onClick","toLowerCase","components_Users","SearchBox","handleSearchChange","type","placeholder","aria-label","onChange","e","Search","id","components_SearchBox","API","axios","get","UserList","order","filteredUsers","heading","_this","setState","sortedUsers","sort","b","localeCompare","event","filter","target","value","filteredList","item","Object","values","join","indexOf","_this2","this","then","results","data","Fragment","components_Search","components_UserTable","Component","UserListPage","UserList_UserList","Wrapper","children","Title","Jumbotron","fluid","Container","App","components_Wrapper","Title_Title","UserListPage_UserListPage","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6f1127d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Users({ users }) {\n  return (\n    <tbody>\n      {users[0] !== undefined && users[0].name !== undefined ? (\n        users.map(({ login, picture, name, email, location, phone}) => {\n          return (\n            <tr key={login.uuid}>\n              <td data-th=\"Image\">\n                <img\n                  src={picture.thumbnail}\n                  alt=\"profile pic\"\n                  className=\"img-responsive\"\n                />\n              </td>\n              <td data-th=\"Name\">\n                {name.title} {name.first} {name.last}\n              </td>\n              <td data-th=\"Phone\">\n                {phone}\n              </td>\n              <td data-th=\"Email\">\n                {email}\n              </td>\n              <td data-th=\"City\">\n                {location.city}, {location.state}\n              </td>\n            </tr>\n          );\n        })\n      ) : (\n        <div></div>\n      )}\n    </tbody>\n  );\n}\n\nexport default Users;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Users from \"./Users\";\n\nfunction UserTable({ headings, users, handleSort }) {\n  return (\n    <div>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            {headings.map(({ name, width }) => {\n              return (\n                <th \n                  key={name} \n                  style={{ width }}\n                  onClick={() => {\n                    handleSort(name.toLowerCase());\n                  }}\n                >\n                  {name}\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n        <Users users={users}/>\n      </Table>\n    </div>\n  );\n}\n\nexport default UserTable;\n","import React from \"react\";\n// import InputGroup from \"react-bootstrap/InputGroup\";\n// import FormControl from \"react-bootstrap/FormControl\";\nimport \"../styles/SearchBox.css\";\n\nfunction SearchBox({ handleSearchChange }) {\n  return (\n  <div className=\"searchbox\">\n      <form className=\"form-inline\">\n        <input\n          className=\"form-control\"\n          type=\"search\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          onChange={e => handleSearchChange(e)}\n        />\n      </form>\n    </div>\n  );\n}\nexport default SearchBox;","import React from \"react\";\nimport SearchBox from \"./SearchBox.js\";\nimport \"../styles/Nav.css\";\n\n// The SearchBox functional component contains the html for the search box input form\nfunction Search({ handleSearchChange }) {\n  return (\n    <nav className=\"navbar navbar-expand navbar-light bg-light\">\n      <div className=\"navbar-collapse row\" id=\"navbarNav\">\n        <SearchBox handleSearchChange={handleSearchChange} />\n      </div>\n    </nav>\n  );\n}\nexport default Search;\n","import axios from \"axios\";\n\nexport default {\n  // Gets all users\n  getRandomUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\n  }\n};\n","import React, { Component } from \"react\";\nimport UserTable from \"./UserTable\";\nimport Search from \"./Search\";\nimport API from \"../utils/API\";\nimport \"../styles/UserList.css\";\n\nexport default class UserList extends Component {\n  // set the state for users, the order they're displayed and the filtered array\n  state = {\n    users: [{}],\n    order: \"descend\",\n    filteredUsers: [{}]\n  }\n\n  // Set the names of the table columns; the key is \"name\" which will be mapped over\n  headings = [\n    { name: \"Image\", width: \"10%\" },\n    { name: \"Name\", width: \"10%\" },\n    { name: \"Phone\", width: \"20%\" },\n    { name: \"Email\", width: \"20%\" },\n    { name: \"Location\", width: \"10%\" }\n  ]\n\n  handleSort = heading => {\n    if (this.state.order === \"descend\") {\n      this.setState({\n        order: \"ascend\"\n      })\n    } else {\n      this.setState({\n        order: \"descend\"\n      })\n    }\n\n    // compare 2 values: the input string in the search box\n    // with the results.name.first and results.name.last string values\n    // that is what the a & b parameters represent: the two values to compare\n    const compareFnc = (a, b) => {\n      if (this.state.order === \"ascend\") {\n        // account for missing values; if there is no search input\n        // return the entire list\n        // if the inpput does not match anything, return nothing\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        }\n        // compare input to the data and only return data matching input\n        else if (heading === \"name\") {\n          return a[heading].first.localeCompare(b[heading].first);\n        } else {\n          return a[heading] - b[heading];\n        }\n      } else {\n        // account for missing values\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        }\n        else if (heading === \"name\") {\n          return b[heading].first.localeCompare(a[heading].first);\n        } else {\n          return b[heading] - a[heading];\n        }\n      }\n    }\n    const sortedUsers = this.state.filteredUsers.sort(compareFnc);\n    this.setState({ filteredUsers: sortedUsers });\n  }\n\n  handleSearchChange = (event) => {\n    // The filter variable is each instance of string input in the search box,\n    // such as 's', 'st', 'ste', 'step', 'steph', etc...\n    const filter = event.target.value;\n    // Create a new array equal to the filtered users\n    // by mapping over each user (item) value and return only values matching\n    // the string input in the search box\n    const filteredList = this.state.users.filter(item => {\n      // merge data together, then see if user input is anywhere inside\n      let values = Object.values(item)\n        .join(\"\")\n        .toLowerCase();\n      return values.indexOf(filter.toLowerCase()) !== -1;\n    });\n    this.setState({ filteredUsers: filteredList });\n  }\n\n  // get the results ready to render the users on the page\n  componentDidMount() {\n    API.getRandomUsers().then(results => {\n      this.setState({\n        users: results.data.results,\n        filteredUsers: results.data.results\n      });\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Search handleSearchChange={this.handleSearchChange} />\n        <div className=\"data-area\">\n          <UserTable\n            headings={this.headings}\n            users={this.state.filteredUsers}\n            handleSort={this.handleSort}\n          />\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport UserList from './UserList';\n\nexport default class UserListPage extends Component {\n  render() {\n    return (\n      <div>\n        \n        <UserList/>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nfunction Wrapper({ children }) {\n  return (\n      <div>\n        { children }\n      </div>\n  );\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport { Container, Jumbotron } from \"react-bootstrap\";\n\nexport default class Title extends Component {\n  render() {\n    return (\n      <Jumbotron fluid>\n        <Container>\n          <h1>Employee Directory</h1>\n          <p>\n            Sort employees by name or email, or use the search box to find a\n            specific employee.\n          </p>\n        </Container>\n      </Jumbotron>\n    );\n  }\n}\n","import React from \"react\";\nimport UserListPage from \"./components/UserListPage\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Title/>\n        <UserListPage/>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}